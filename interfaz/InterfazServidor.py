#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sat Aug  9 15:23:42 2014
#

import wx
import wx.calendar

from datetime import timedelta
import datetime as datetime
# begin wxGlade: dependencies
import gettext
# end wxGlade
from ServicioPyro import *
# begin wxGlade: extracode
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.main_menubar = wx.MenuBar()
        self.Inicio = wx.Menu()
        self.main_menubar.Append(self.Inicio, _(u"Inicio"))
        reconectar = self.Inicio.Append(wx.ID_ANY, u'Reconectar', u'Conectarse a otro servicio')
        self.Inicio.Append(wx.ID_EXIT, u'Salir', u'Salir de la aplicación')
        self.SetMenuBar(self.main_menubar)
        self.Bind(wx.EVT_MENU, self.listar_servidores, reconectar)
        # Menu Bar end
        self.button_1 = wx.Button(self, wx.ID_ANY, _(u"Crear"))
        self.sizer_2_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Menu"))
        self.calendar_ctrl_1 = wx.calendar.CalendarCtrl(self, wx.ID_ANY, style=wx.calendar.CAL_MONDAY_FIRST)
        self.button_3 = wx.Button(self, wx.ID_ANY, _(u"Crear"))
        self.sizer_3_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Ofertas"))
        self.calendar_ctrl_2 = wx.calendar.CalendarCtrl(self, wx.ID_ANY, style=wx.calendar.CAL_MONDAY_FIRST)
        self.list_ctrl_1 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.list_ctrl_2 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)

        # configuramos las columnas de las ofertas y de los menus
        self.list_ctrl_1.InsertColumn(0,u"Nombre")
        self.list_ctrl_1.SetColumnWidth(0,180)
        self.list_ctrl_1.InsertColumn(1,u"Precio")
        self.list_ctrl_1.InsertColumn(2,u"Disponible")

        self.list_ctrl_2.InsertColumn(0,u"Nombre")
        self.list_ctrl_2.SetColumnWidth(0,180)
        self.list_ctrl_2.InsertColumn(1,u"Precio")
        self.list_ctrl_2.InsertColumn(2,u"Disponible")
        # rellenamos las listas
        for data in servicio.Menus:
            pos = self.list_ctrl_1.InsertStringItem(0,data['nombre'])
            self.list_ctrl_1.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_1.SetStringItem(pos,2,str(data['disponible']))
        for data in servicio.Ofertas:
            pos = self.list_ctrl_2.InsertStringItem(0,data['nombre'])
            self.list_ctrl_2.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_2.SetStringItem(pos,2,str(data['disponible']))

        self.__set_properties()
        self.__do_layout()

        # bindeamos los eventos de botones y boton derecho sobre las listas
        self.list_ctrl_1.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.showPopupMenu)
        self.createContextMenu()
        self.list_ctrl_2.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.showPopupMenu2)
        self.createContextMenu2()   # creamos el context menu que aparecera con el boton derecho
        self.calendar_ctrl_1.Bind(wx.calendar.EVT_CALENDAR_SEL_CHANGED,self.dia_menu)
        self.calendar_ctrl_2.Bind(wx.calendar.EVT_CALENDAR_SEL_CHANGED,self.dia_oferta)

        self.Bind(wx.EVT_BUTTON, self.crear_menu, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.crear_oferta, self.button_3)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Servidor "+servicio.servicioActual))
        self.SetSize((697, 657))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        grid_sizer_3 = wx.GridSizer(2, 1, 0, 0)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_5 = wx.GridSizer(1, 1, 0, 0) # cambiado
        grid_sizer_2 = wx.GridSizer(2, 1, 0, 0)
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.GridSizer(1, 1, 0, 0) # cambiado
        grid_sizer_4.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.SHAPED, 0)
        sizer_2.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(sizer_2, 1, wx.EXPAND | wx.SHAPED, 0)
        grid_sizer_2.Add(self.calendar_ctrl_1, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 5)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.SHAPED, 0)
        sizer_3.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(sizer_3, 1, wx.EXPAND | wx.SHAPED, 0)
        grid_sizer_3.Add(self.calendar_ctrl_2, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 5)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.list_ctrl_2, 1, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def dia_menu(self, event):
        fecha = self.calendar_ctrl_1.GetDate().FormatISODate()
        fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
        servicio.updateMenus( str(fecha.date()) )            # actualizamos los items del servidor
        self.list_ctrl_1.DeleteAllItems()
        for data in servicio.Menus:
            pos = self.list_ctrl_1.InsertStringItem(0,data['nombre'])
            self.list_ctrl_1.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_1.SetStringItem(pos,2,str(data['disponible']))
        event.Skip()

    def dia_oferta(self, event):
        fecha = self.calendar_ctrl_2.GetDate().FormatISODate()
        fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
        servicio.updateOfertas( str(fecha.date()) )          # actualizamos los items del servidor
        self.list_ctrl_2.DeleteAllItems() # limpiamos la lista
        for data in servicio.Ofertas:
            pos = self.list_ctrl_2.InsertStringItem(0,data['nombre'])
            self.list_ctrl_2.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_2.SetStringItem(pos,2,str(data['disponible']))
        event.Skip()

    # lista los servidores existentes en el servidor de nombrado
    def listar_servidores(self, event):
        print 'listar servidores'
        servidores = listar_servidores(self)
        servidores.Show()
        servidores.Bind(wx.EVT_CLOSE, self.on_close_listar)
        event.Skip()

    def on_close_listar(self, event):
        # actualizamos las listas
        self.SetTitle(_("Servidor "+servicio.servicioActual))
        self.list_ctrl_1.DeleteAllItems()
        for data in servicio.Menus:
            pos = self.list_ctrl_1.InsertStringItem(0,data['nombre'])
            self.list_ctrl_1.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_1.SetStringItem(pos,2,str(data['disponible']))
        self.list_ctrl_2.DeleteAllItems()
        for data in servicio.Ofertas:
            pos = self.list_ctrl_2.InsertStringItem(0,data['nombre'])
            self.list_ctrl_2.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_2.SetStringItem(pos,2,str(data['disponible']))
        event.Skip()
    # crea el context menu y le bindea los eventos para los menus
    def createContextMenu(self):
        self.menu = wx.Menu()
        item1 = self.menu.Append(-1,u'Editar')
        item2 = self.menu.Append(-1,u'Borrar')
        self.Bind(wx.EVT_MENU, self.editarMenu, item1)
        self.Bind(wx.EVT_MENU, self.borrarMenu, item2)

    # crea el context menu y le bindea los eventos para las ofertas
    def createContextMenu2(self):
        self.menu2 = wx.Menu()
        item1 = self.menu2.Append(-1,u'Editar')
        item2 = self.menu2.Append(-1,u'Borrar')
        self.Bind(wx.EVT_MENU, self.editarOferta, item1)
        self.Bind(wx.EVT_MENU, self.borrarOferta, item2)


    # evento editar menu del context menu, abre la ventana de edicion de menu
    def editarMenu(self,event):
        print 'Editar menu'
        menu = self.list_ctrl_1.GetFocusedItem()
        if menu !=-1:   # comprueba si hay menu seleccionado para editar
            menu = self.list_ctrl_1.GetItemText(self.list_ctrl_1.GetFocusedItem())
            crearMenu = crear_menu(self,menu=menu)
            crearMenu.Show()
            crearMenu.Bind(wx.EVT_CLOSE, self.on_close_crear_menu)  # bindeamos el evento que saltara cuando se cierre la ventana
            event.Skip()
        event.Skip()

    # evento borrar menu del context menu
    def borrarMenu(self,event):
        print 'Borrando menu'
        menu = self.list_ctrl_1.GetFocusedItem()
        if menu !=-1:   # comprueba si hay menu seleccionado para borrar
            if servicio.delMenu(self.list_ctrl_1.GetItemText(menu)):
                print 'Menu borrado!'
                msgbox = wx.MessageBox(u'!Menu borrado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                # Actualizamos la lista de menus
                fecha = self.calendar_ctrl_1.GetDate().FormatISODate()
                fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
                servicio.updateMenus( str(fecha.date()) )
                self.list_ctrl_1.DeleteAllItems()
                for data in servicio.Menus:
                    pos = self.list_ctrl_1.InsertStringItem(0,data['nombre'])
                    self.list_ctrl_1.SetStringItem(pos,1,str(data['precio']))
                    self.list_ctrl_1.SetStringItem(pos,2,str(data['disponible']))
            else:
                print 'No se pudo borrar el menu'
                msgbox = wx.MessageBox(u'¡No se pudo borrar el menu!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # evento editar oferta del context menu, abre la ventana de edicion de oferta
    def editarOferta(self,event):
        print 'Editar oferta'
        oferta = self.list_ctrl_2.GetFocusedItem()
        if oferta !=-1: # comprueba si hay oferta seleccionada
            oferta = self.list_ctrl_2.GetItemText(self.list_ctrl_2.GetFocusedItem())
            crearOferta = crear_oferta(self,oferta=oferta)
            crearOferta.Show()
            crearOferta.Bind(wx.EVT_CLOSE, self.on_close_crear_oferta)
            event.Skip()
        event.Skip()

    # evento borrar oferta del context menu
    def borrarOferta(self,event):
        print 'Borrando oferta'
        oferta = self.list_ctrl_2.GetFocusedItem()
        if oferta !=-1: # comprueba si hay oferta seleccionado
            if servicio.delOferta(self.list_ctrl_2.GetItemText(oferta)):
                print 'Oferta borrada!'
                msgbox = wx.MessageBox(u'!Oferta borrada!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                # Actualizamos la lista de ofertas
                fecha = self.calendar_ctrl_2.GetDate().FormatISODate()
                fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
                servicio.updateOfertas( str(fecha.date()) )
                self.list_ctrl_2.DeleteAllItems()
                for data in servicio.Ofertas:
                    pos = self.list_ctrl_2.InsertStringItem(0,data['nombre'])
                    self.list_ctrl_2.SetStringItem(pos,1,str(data['precio']))
                    self.list_ctrl_2.SetStringItem(pos,2,str(data['disponible']))
            else:
                print 'No se pudo borrar la oferta'
                msgbox = wx.MessageBox(u'¡No se pudo borrar la oferta!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # muestra el context menu cuando se hace click derecho sobre la lista de menus
    def showPopupMenu(self,event):
        print 'boton derecho'
        position = self.ScreenToClient(wx.GetMousePosition())
        item = self.list_ctrl_1.HitTest(event.GetPosition())
        if item[0]!=-1: # para que solo aparezca el menu cuando pincha en un item
            self.PopupMenu(self.menu,position)
        event.Skip()

    # muestra el context menu cuando se hace click derecho sobre la lista de ofertas
    def showPopupMenu2(self,event):
        print 'boton derecho2'
        position = self.ScreenToClient(wx.GetMousePosition())
        item = self.list_ctrl_2.HitTest(event.GetPosition())
        if item[0]!=-1: # para que solo aparezca el menu cuando pincha en un item
            self.PopupMenu(self.menu2,position)
        event.Skip()

    # evento que se lanza al volver de editar o crear un menu, actualizando la lista de menus
    def on_close_crear_menu(self, event):
        print 'on_close_crear_menu'
        self.list_ctrl_1.DeleteAllItems() # limpiamos la lista
        fecha = self.calendar_ctrl_1.GetDate().FormatISODate()
        fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
        servicio.updateMenus( str(fecha.date()) )            # actualizamos los items del servidor
        for data in servicio.Menus:
            pos = self.list_ctrl_1.InsertStringItem(0,data['nombre'])
            self.list_ctrl_1.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_1.SetStringItem(pos,2,str(data['disponible']))
        event.Skip()

    # evento que se lanza al editar o crear una oferta, actualizando la lista de ofertas
    def on_close_crear_oferta(self, event):
        print 'on_close_crear_oferta'
        self.list_ctrl_2.DeleteAllItems() # limpiamos la lista
        fecha = self.calendar_ctrl_2.GetDate().FormatISODate()
        fecha = datetime.datetime.strptime(fecha, "%Y-%m-%d")
        servicio.updateOfertas( str(fecha.date()) )          # actualizamos los items del servidor
        for data in servicio.Ofertas:
            pos = self.list_ctrl_2.InsertStringItem(0,data['nombre'])
            self.list_ctrl_2.SetStringItem(pos,1,str(data['precio']))
            self.list_ctrl_2.SetStringItem(pos,2,str(data['disponible']))
        event.Skip()

    # abre la ventana de crear menu
    def crear_menu(self, event):  # wxGlade: MyFrame.<event_handler>
        print "crear_menu"
        crearMenu = crear_menu(self)
        crearMenu.Show()
        crearMenu.Bind(wx.EVT_CLOSE, self.on_close_crear_menu)
        event.Skip()

    # abre la ventana para crear una oferta
    def crear_oferta(self, event):  # wxGlade: MyFrame.<event_handler>
        print "crear_oferta"
        crearOferta = crear_oferta(self)
        crearOferta.Show()
        crearOferta.Bind(wx.EVT_CLOSE, self.on_close_crear_oferta)
        event.Skip()

# end of class MyFrame

class listar_servidores(wx.Frame):
    def __init__(self, parent, *args, **kwds):
        kwds["style"] = wx.CLOSE_BOX|wx.CAPTION|wx.MINIMIZE_BOX|wx.CLIP_CHILDREN
        wx.Frame.__init__(self,parent, *args, **kwds)
        self.list_ctrl_servidores = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER, size=(200,-1))
        self.sizer_dir_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Direccion servidor de nombrado"))
        self.text_ctrl_dir = wx.TextCtrl(self, wx.ID_ANY, style=wx.TE_READONLY)
        self.sizer_key_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"KEY"))
        self.text_ctrl_key = wx.TextCtrl(self, wx.ID_ANY, style=wx.TE_READONLY)
        #self.button_guardar = wx.Button(self, wx.ID_ANY, _(u"Guardar"))

        self.list_ctrl_servidores.InsertColumn(0,u"Servidor")
        self.list_ctrl_servidores.SetColumnWidth(0,200)
        self.__set_properties()
        self.__do_layout()

        # le preguntamos al servidor de nombrado los objetos que tiene registrado
        try:
            ns = Pyro4.locateNS(host=servicio.dir.split('@')[1])
            for servidor in ns.list():
                if not 'Pyro.NameServer' in servidor: # quitamos el propio objeto del servidor de nombrado xq no nos interesa
                    self.list_ctrl_servidores.InsertStringItem(0,str(servidor))
        except Exception, e:
            pass
        # centramos la ventana en la pantalla
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.servidor_selec, self.list_ctrl_servidores)
        #self.Bind(wx.EVT_BUTTON, self.cargar_servidores, self.button_guardar)
        self.Center()

    def __set_properties(self):
        # definimos el titulo de la ventana y los tamaños de los elementos de la interfaz
        self.SetTitle(_(u"Servidores"))
        self.SetSize((200, 300))
        self.text_ctrl_dir.AppendText(str(servicio.dir))
        self.text_ctrl_key.AppendText(str(servicio.key))

    def __do_layout(self):
        # begin wxGlade: crear_menu.__do_layout
        # definimos el layout en el que se colocaran los elementos de la interfaz
        sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer_dir_staticbox.Lower()
        sizer_1 = wx.StaticBoxSizer(self.sizer_dir_staticbox, wx.HORIZONTAL)
        sizer_1.Add(self.text_ctrl_dir, 1, wx.EXPAND, 0)
        self.sizer_key_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_key_staticbox, wx.HORIZONTAL)
        sizer_2.Add(self.text_ctrl_key, 1, wx.EXPAND, 0)
        sizer.Add(sizer_1, 0, wx.EXPAND, 0)
        sizer.Add(sizer_2, 0, wx.EXPAND, 0)
        #sizer.Add(self.button_guardar, 0, wx.EXPAND, 0)
        sizer.Add(self.list_ctrl_servidores, 0, 0, 0)
        self.SetSizer(sizer)
        self.Layout()

    def servidor_selec(self, event):
        print 'servidor_selec'
        item = self.list_ctrl_servidores.GetItemText(self.list_ctrl_servidores.GetFocusedItem())
        if servicio.reconectar(servicio.dir, item, servicio.key):
            self.Close(True)
        else:
            print 'No se pudo conectar al servicio'
            msgbox = wx.MessageBox(u'¡No se pudo conectar al servidor!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    def cargar_servidores(self, event):
        print 'cargar_servidores'
        try:
            self.list_ctrl_servidores.DeleteAllItems()
            ns = Pyro4.locateNS(host=self.text_ctrl_dir.GetValue().strip().split('@')[1])
            for servidor in ns.list():
                if not 'Pyro.NameServer' in servidor: # quitamos el propio objeto del servidor de nombrado xq no nos interesa
                    self.list_ctrl_servidores.InsertStringItem(0,str(servidor))
        except Exception, e:
            print 'No se encontro el servidor de nombrado'
            msgbox = wx.MessageBox(u'¡No se encontró el servidor de nombrado!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

# end of listar_servidores

class crear_menu(wx.Frame):

    def searchNomItem(self, nomitem, items):
        # busca nomitem en la lista de items con la estructura de elementos que nos devuelve serpent
        for element in items:
            if str(element['_data']['nombre']) == nomitem:
                return element['_data']['id']

    def __init__(self, parent, menu=-1,*args, **kwds):
        # begin wxGlade: crear_menu.__init__
        kwds["style"] = wx.CLOSE_BOX|wx.CAPTION|wx.MINIMIZE_BOX|wx.CLIP_CHILDREN  # creando la ventana solo con el aspa de cierre y tamaño fijo
        #  wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.STAY_ON_TOP|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, parent, *args, **kwds)
        # creando los elementos que vamos a necesitar en la interfaz
        self.calendar_ctrl_3 = wx.calendar.CalendarCtrl(self, wx.ID_ANY, style=wx.calendar.CAL_MONDAY_FIRST)
        self.sizer_34_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Nombre"))
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_12_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Duración en dias"))
        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_13_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Precio"))
        self.checkbox_1 = wx.CheckBox(self, wx.ID_ANY, "")
        self.sizer_14_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Activo"))
        self.Guardar = wx.Button(self, wx.ID_ANY, _(u"Guardar"))
        self.button_14 = wx.Button(self, wx.ID_ANY, _(u"img"))
        self.list_ctrl_5a = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.sizer_15_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Primeros"))
        self.list_ctrl_5ab = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.sizer_16_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Segundos"))
        self.list_ctrl_5abc = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.sizer_17_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Postres"))
        self.text_ctrl_descripcion = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.sizer_descripcion_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Descripción"))
        self.button_5 = wx.Button(self, wx.ID_ANY, _(u"<<"))
        self.button_7 = wx.Button(self, wx.ID_ANY, _(u">>"))
        self.button_6 = wx.Button(self, wx.ID_ANY, _(u"Crear item"))
        self.button_8 = wx.Button(self, wx.ID_ANY, _(u"<<"))
        self.button_9 = wx.Button(self, wx.ID_ANY, _(u">>"))
        self.button_10 = wx.Button(self, wx.ID_ANY, _(u"<<"))
        self.button_11 = wx.Button(self, wx.ID_ANY, _(u">>"))
        self.list_ctrl_3 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        if menu!=-1: # para que en caso de que se este editando un menu no se pueda cambiar su nombre
            self.text_ctrl_3 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY, size=(200,-1))
        else:
            self.text_ctrl_3 = wx.TextCtrl(self, wx.ID_ANY, "", size=(200,-1))

        # variables para guardar los items asignados y la codificacion en base64 de la imagen
        # en ellos se listan las id de la base de datos
        self.primeros = []
        self.segundos = []
        self.postres = []
        self.img = 0
        # variables temporales para los items que se asignan y se borran mientras editamos un menu
        self.primerosModAdd = []
        self.segundosModAdd = []
        self.postresModAdd = []
        self.primerosModDel = []
        self.segundosModDel = []
        self.postresModDel = []

        self.editando = False

        # Dando estilo a las listas de items
        self.list_ctrl_3.InsertColumn(0,u"ID")
        self.list_ctrl_3.SetColumnWidth(0,0) # para que no se visualize
        self.list_ctrl_3.InsertColumn(1,u"Nombre")
        self.list_ctrl_3.InsertColumn(2,u"Precio")
        self.list_ctrl_3.InsertColumn(3,u"Disponible")

        self.list_ctrl_5ab.InsertColumn(0,u"ID")
        self.list_ctrl_5ab.SetColumnWidth(0,0) # para que no se visualize
        self.list_ctrl_5ab.InsertColumn(1,u"Nombre")
        self.list_ctrl_5ab.SetColumnWidth(1,100)
        self.list_ctrl_5ab.InsertColumn(2,u"Precio")
        self.list_ctrl_5ab.SetColumnWidth(2,60)
        self.list_ctrl_5ab.InsertColumn(3,u"Disponible")
        self.list_ctrl_5ab.SetColumnWidth(3,45)

        self.list_ctrl_5a.InsertColumn(0,u"ID")
        self.list_ctrl_5a.SetColumnWidth(0,0) # para que no se visualize
        self.list_ctrl_5a.InsertColumn(1,u"Nombre")
        self.list_ctrl_5a.SetColumnWidth(1,100)
        self.list_ctrl_5a.InsertColumn(2,u"Precio")
        self.list_ctrl_5a.SetColumnWidth(2,60)
        self.list_ctrl_5a.InsertColumn(3,u"Disponible")
        self.list_ctrl_5a.SetColumnWidth(3,45)

        self.list_ctrl_5abc.InsertColumn(0,u"ID")
        self.list_ctrl_5abc.SetColumnWidth(0,0) # para que no se visualize
        self.list_ctrl_5abc.InsertColumn(1,u"Nombre")
        self.list_ctrl_5abc.SetColumnWidth(1,100)
        self.list_ctrl_5abc.InsertColumn(2,u"Precio")
        self.list_ctrl_5abc.SetColumnWidth(2,60)
        self.list_ctrl_5abc.InsertColumn(3,u"Disponible")
        self.list_ctrl_5abc.SetColumnWidth(3,45)

        # Rellenando la lista de items disponibles
        for data in servicio.Items:
            pos = self.list_ctrl_3.InsertStringItem(0,str(data['_data']['id']))
            self.list_ctrl_3.SetStringItem(pos,1,str(data['_data']['nombre']))
            self.list_ctrl_3.SetStringItem(pos,2,str(data['_data']['precio']))
            self.list_ctrl_3.SetStringItem(pos,3,str(data['_data']['disponible']))
            

        self.__set_properties()
        self.__do_layout()
        
        # creamos el menu del click derecho para poder mostrarlo cuando queramos
        self.createMenu()

        # bindeamos los eventos a los diferentes objetos que hemos creado mas arriba
        self.list_ctrl_3.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.showPopupMenu)
        self.Bind(wx.EVT_BUTTON, self.save_menu, self.Guardar)
        self.Bind(wx.EVT_TEXT, self.solo_num, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT, self.solo_num2, self.text_ctrl_2)
        self.Bind(wx.EVT_BUTTON, self.load_img, self.button_14)
        self.Bind(wx.EVT_BUTTON, self.add_prim, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.left_prim, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.crear_item, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.add_seg, self.button_8)
        self.Bind(wx.EVT_BUTTON, self.left_seg, self.button_9)
        self.Bind(wx.EVT_BUTTON, self.add_postre, self.button_10)
        self.Bind(wx.EVT_BUTTON, self.left_postre, self.button_11)
        
        # si estamos editando un menu rellenamos los datos
        if menu!=-1:
            print 'Editando menu '+menu
            self.menuMod = self.searchMenu(menu,servicio.Menus)
            self.text_ctrl_3.AppendText(self.menuMod['nombre'])
            self.text_ctrl_2.AppendText(str(self.menuMod['precio']))
            self.text_ctrl_descripcion.AppendText(self.menuMod['descripcion'])

            # seleccionar fechas
            fechaini = datetime.datetime.strptime(self.menuMod['fecha_ini'], "%Y-%m-%dT00:00:00")
            fechafin = datetime.datetime.strptime(self.menuMod['fecha_fin'], "%Y-%m-%dT00:00:00")

            self.calendar_ctrl_3.PySetDate(fechaini)
            # duracion en dias
            delta = fechafin - fechaini
            self.text_ctrl_1.AppendText(str(delta.days))
            if self.menuMod['disponible'] == False:
                self.checkbox_1.SetValue(0)
            self.img = self.menuMod['imagen']
            # rellenar listas
            for data in self.menuMod['primeros']:
                pos = self.list_ctrl_5a.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5a.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5a.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5a.SetStringItem(pos,3,str(data['_data']['disponible']))
                self.primeros.append(self.searchNomItem(data['_data']['nombre'],servicio.Items)) # guardamos las id de los items modelos
            for data in self.menuMod['segundos']:
                pos = self.list_ctrl_5ab.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items)))
                self.list_ctrl_5ab.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5ab.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5ab.SetStringItem(pos,3,str(data['_data']['disponible']))
                self.segundos.append(self.searchNomItem(data['_data']['nombre'],servicio.Items))
            for data in self.menuMod['postres']:
                pos = self.list_ctrl_5abc.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items)))
                self.list_ctrl_5abc.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5abc.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5abc.SetStringItem(pos,3,str(data['_data']['disponible']))
                self.postres.append(self.searchNomItem(data['_data']['nombre'],servicio.Items))
            self.editando = True # variable bandera

        # centramos la ventana en la pantalla
        self.Center()
        # end wxGlade

    def searchMenu(self, iditem, items):
        for element in items:
            if str(element['nombre']) == iditem:
                return element

    def __set_properties(self):
        # begin wxGlade: crear_menu.__set_properties
        # definimos el titulo de la ventana y los tamaños de los elementos de la interfaz
        self.SetTitle(_("Menu"))
        self.SetSize((800, 550))
        self.checkbox_1.SetValue(1)
        self.text_ctrl_descripcion.SetMinSize((200, 100))
        self.list_ctrl_3.SetMinSize((250, 510))
        self.calendar_ctrl_3.SetMinSize((240, 150))
        # primeros segundos y postre
        self.list_ctrl_5a.SetMinSize((164, 140))
        self.list_ctrl_5ab.SetMinSize((164, 140))
        self.list_ctrl_5abc.SetMinSize((164, 140))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: crear_menu.__do_layout
        # definimos el layout en el que se colocaran los elementos de la interfaz
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_activo = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_6 = wx.FlexGridSizer(1, 2, 0, 0)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_guardar = wx.BoxSizer(wx.VERTICAL)
        self.sizer_descripcion_staticbox.Lower()
        self.sizer_17_staticbox.Lower()
        sizer_17 = wx.StaticBoxSizer(self.sizer_17_staticbox, wx.HORIZONTAL)
        self.sizer_16_staticbox.Lower()
        sizer_16 = wx.StaticBoxSizer(self.sizer_16_staticbox, wx.HORIZONTAL)
        self.sizer_15_staticbox.Lower()
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.HORIZONTAL)
        grid_sizer_7 = wx.FlexGridSizer(7, 1, 0, 0)
        self.sizer_14_staticbox.Lower()
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.HORIZONTAL)
        self.sizer_13_staticbox.Lower()
        sizer_13 = wx.StaticBoxSizer(self.sizer_13_staticbox, wx.HORIZONTAL)
        self.sizer_12_staticbox.Lower()
        sizer_12 = wx.StaticBoxSizer(self.sizer_12_staticbox, wx.HORIZONTAL)
        self.sizer_34_staticbox.Lower()
        sizer_34 = wx.StaticBoxSizer(self.sizer_34_staticbox, wx.HORIZONTAL)
        grid_sizer_7.Add(self.calendar_ctrl_3, 0, wx.EXPAND, 0)
        sizer_34.Add(self.text_ctrl_3, 0, 0, 0)
        grid_sizer_7.Add(sizer_34, 1, wx.EXPAND, 0)
        sizer_12.Add(self.text_ctrl_1, 0, 0, 0)
        grid_sizer_7.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_13.Add(self.text_ctrl_2, 0, 0, 0)
        grid_sizer_7.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_14.Add(self.checkbox_1, 0, 0, 0)
        grid_sizer_activo = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_7.Add(grid_sizer_activo,1,0,0)
        grid_sizer_activo.Add(sizer_14, 1, wx.EXPAND, 0)
        grid_sizer_activo.Add((40,10),0,0,0)
        grid_sizer_activo.Add(self.button_14, 1, wx.EXPAND, 0)
        sizer_descripcion = wx.StaticBoxSizer(self.sizer_descripcion_staticbox, wx.HORIZONTAL)
        sizer_descripcion.Add(self.text_ctrl_descripcion,0,0,0)
        grid_sizer_7.Add(sizer_descripcion,1,wx.EXPAND,0)
        sizer_guardar.Add(self.Guardar, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0) 
        grid_sizer_7.Add(sizer_guardar,0,wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL,0)
        sizer_5.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        sizer_15.Add(self.list_ctrl_5a, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_15, 1, wx.EXPAND | wx.ALIGN_RIGHT , 0)
        sizer_16.Add(self.list_ctrl_5ab, 1, wx.EXPAND , 0)
        sizer_6.Add(sizer_16, 1, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        sizer_17.Add(self.list_ctrl_5abc, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_17, 1, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add((85, 20), 0, 0, 0)
        sizer_7.Add(self.button_6, 0, 0, 0)
        sizer_7.Add((85, 20), 0, 0, 0)
        sizer_7.Add(self.button_5, 0, 0, 0)
        sizer_7.Add(self.button_7, 0, 0, 0)
        sizer_7.Add((85, 150), 0, 0, 0)
        sizer_9.Add(self.button_8, 0, 0, 0)
        sizer_9.Add(self.button_9, 0, 0, 0)
        sizer_8.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_8.Add((86, 120), 0, 0, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_11.Add(self.button_10, 0, 0, 0)
        sizer_11.Add(self.button_11, 0, 0, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_10, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(self.list_ctrl_3, 1, 0, 0)
        sizer_5.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        self.Layout()
        # end wxGlade

    # funcion para crear el context menu del click izquierdo
    def createMenu(self):
        self.menu = wx.Menu()
        item1 = self.menu.Append(-1,u'Editar')           # añadimos los items
        item2 = self.menu.Append(-1,u'Borrar')
        self.Bind(wx.EVT_MENU, self.editarItem, item1)  # bindeamos sus acciones
        self.Bind(wx.EVT_MENU, self.borrarItem, item2)

    def borrarItem(self,event):
        print 'Borrando item'
        item = self.list_ctrl_3.GetItemText(self.list_ctrl_3.GetFocusedItem())
        if servicio.delItem(item):
            msgbox = wx.MessageBox(u'!Item borrado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            self.list_ctrl_3.DeleteAllItems() # limpiamos la lista
            self.comprobarItemsBorrado(item) 
            servicio.updateItems()            # actualizamos los items del servidor
            for data in servicio.Items:       # y actualizamos la lista
                pos = self.list_ctrl_3.InsertStringItem(0,str(data['_data']['id']))
                self.list_ctrl_3.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_3.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_3.SetStringItem(pos,3,str(data['_data']['disponible']))
        else:
            print 'ERROR al borrar el item'
            msgbox = wx.MessageBox(u'¡No se pudo borrar el item!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # muestra el la ventana de editar item con los datos del item que estamos editando
    # tambien se bindea el evento para que se actualicen los items cuando se cierre la ventana de editar item
    def editarItem(self,event):
        print 'Editando item'
        item = self.list_ctrl_3.GetItemText(self.list_ctrl_3.GetFocusedItem())
        crearItem = crear_item(self,item=item)
        crearItem.Show()
        self.Hide()
        crearItem.Bind(wx.EVT_CLOSE, self.on_close_crear_item)
        self.crearItem = crearItem # comentar esto creo que sobra
        event.Skip()

    # muestra el menu del click derecho
    def showPopupMenu(self,event):
        print 'Boton derecho'
        position = self.ScreenToClient(wx.GetMousePosition())
        item = self.list_ctrl_3.HitTest(event.GetPosition())
        if item[0]!=-1: # para que solo aparezca el menu cuando pincha en un item
            self.PopupMenu(self.menu,position)
        event.Skip()

    # cuando se borra un item actualiza las listas de primeros, segundos y postres quitando el item borrado de ellas
    def comprobarItemsBorrado(self,itemBorrado):
        count = self.list_ctrl_5a.GetItemCount()
        i=0
        for row in range(count):
            item = self.list_ctrl_5a.GetItem(itemId=row, col=0)
            if item.GetText() == itemBorrado:
                self.list_ctrl_5a.DeleteItem(i)
                self.primeros.pop(self.primeros.index(int(itemBorrado)))
                break
            i+=1
        count = self.list_ctrl_5ab.GetItemCount()
        i=0
        for row in range(count):
            item = self.list_ctrl_5ab.GetItem(itemId=row, col=0)
            if item.GetText() == itemBorrado:
                self.list_ctrl_5ab.DeleteItem(i)
                self.segundos.pop(self.segundos.index(int(itemBorrado)))
                break
            i+=1
        count = self.list_ctrl_5abc.GetItemCount()
        i=0
        for row in range(count):
            item = self.list_ctrl_5abc.GetItem(itemId=row, col=0)
            if item.GetText() == itemBorrado:
                self.list_ctrl_5abc.DeleteItem(i)
                self.postres.pop(self.postres.index(int(itemBorrado)))
                break
            i+=1

    # solo deja escribir numeros
    def solo_num(self, event):  # wxGlade: crear_menu.<event_handler>
        print "solo_num"
        raw_value = self.text_ctrl_1.GetValue().strip()
        # numeric check
        if all(x in '0123456789' for x in raw_value):
            pass
        else:
            self.text_ctrl_1.ChangeValue('')
        event.Skip()

    # solo deja escribir numeros y puntos
    def solo_num2(self, event):  # wxGlade: crear_menu.<event_handler>
        print "solo_num2"
        raw_value = self.text_ctrl_2.GetValue().strip()
        # numeric check
        if all(x in '0123456789.' for x in raw_value):
            pass
        else:
            self.text_ctrl_2.ChangeValue('')
        event.Skip()

    # Crea el menu con los datos introducidos
    def save_menu(self, event):  # wxGlade: crear_menu.<event_handler>
        print "save_menu"
        # comprobar que no hay campos vacios
        if self.text_ctrl_2.GetValue()!='' and self.text_ctrl_1.GetValue()!='' and self.text_ctrl_3.GetValue()!='' and self.text_ctrl_descripcion.GetValue()!='':
            # generando fechas de inicio y fin del menu el objeto que encapsula el sevicio en el interfaz
            # recibe las fechas en formato %Y-%m-%d en una string
            fechaini = self.calendar_ctrl_3.GetDate().FormatISODate()
            fechaini2 = datetime.datetime.strptime(fechaini, "%Y-%m-%d")

            fechafin = fechaini2 + datetime.timedelta( days=int(self.text_ctrl_1.GetValue()) )
            fechafin = fechafin.date().isoformat()

            if self.editando == False:
                # crear menu
                if servicio.createMenu(self.checkbox_1.GetValue(), self.text_ctrl_2.GetValue(), self.text_ctrl_3.GetValue(), self.text_ctrl_descripcion.GetValue(), fechaini, fechafin, self.img):
                    # asignando items
                    if servicio.addItemMenuP(self.primeros, self.text_ctrl_3.GetValue()) and servicio.addItemMenuS(self.segundos, self.text_ctrl_3.GetValue()) and servicio.addItemMenuD(self.postres, self.text_ctrl_3.GetValue()):
                        print 'Items asignados'
                        msgbox = wx.MessageBox(u'!Menu creado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                        self.Close(True)
                    else:
                        servicio.delMenu(self.text_ctrl_3.GetValue())
                        msgbox = wx.MessageBox(u'¡No se pudo crear menu!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
                else:
                    msgbox = wx.MessageBox(u'¡No se pudo crear el menu, cambie el nombre!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
            else:
                # editando menu
                if servicio.updateMenu(self.checkbox_1.GetValue(), self.text_ctrl_2.GetValue(), self.text_ctrl_3.GetValue(), self.text_ctrl_descripcion.GetValue(), fechaini, fechafin, self.img):
                    # asignando items
                    if servicio.addItemMenuP(self.primerosModAdd, self.text_ctrl_3.GetValue()) and servicio.addItemMenuS(self.segundosModAdd, self.text_ctrl_3.GetValue()) and servicio.addItemMenuD(self.postresModAdd, self.text_ctrl_3.GetValue()) and servicio.delItemMenuP(self.primerosModDel, self.text_ctrl_3.GetValue()) and servicio.delItemMenuS(self.segundosModDel, self.text_ctrl_3.GetValue()) and servicio.delItemMenuD(self.postresModDel, self.text_ctrl_3.GetValue()):
                        print 'Items asignados'
                        msgbox = wx.MessageBox(u'!Menu editado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                        self.Close(True)
                    else:
                        #servicio.delMenu(self.text_ctrl_3.GetValue())
                        msgbox = wx.MessageBox(u'¡No se pudo editar los items del menu!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
                else:
                    msgbox = wx.MessageBox(u'¡No se pudo editar el menu!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        else:
            msgbox = wx.MessageBox(u'¡Rellena los campos!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # muestra selector de archivos nativo para seleccionar la imagen que queremos y genera el base64 de la misma
    def load_img(self, event):  # wxGlade: crear_menu.<event_handler>
        print "load_img"
        img = self.img
        openFileDialog = wx.FileDialog(self, u"Selecionar imagen del menu", "", "", "pictures (*.jpeg,*.jpg,*.png)|*.jpeg;*.jpg;*.png", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)

        if openFileDialog.ShowModal() == wx.ID_CANCEL:
            return     # the user changed idea...

        print openFileDialog.GetPath()
        # pasar a base64 y guardar en variable
        with open(openFileDialog.GetPath(), "rb") as imageFile:
            img = base64.b64encode(imageFile.read())
        if img!=self.img:
            msgbox = wx.MessageBox(u'!Imágen guardada!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            self.img = img
        else:
            msgbox = wx.MessageBox(u'¡La imágen no se guardo, o elegiste la misma que ya estaba guardada!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # Añade un item a la lista de los primeros
    def add_prim(self, event):  # wxGlade: crear_menu.<event_handler>
        print "add_prim"
        # comprobar si el item existe en la lista para no añadirlo dos veces
        if self.list_ctrl_3.GetFocusedItem()!=-1:
            item = self.searchItem(self.list_ctrl_3.GetItemText(self.list_ctrl_3.GetFocusedItem()),servicio.Items)
            try:
                self.primeros.index(item['_data']['id'])
                # el item existe
            except Exception, e:
                # el item no esta en la lista primeros
                if self.list_ctrl_3.GetFirstSelected()!=-1:
                    pos = self.list_ctrl_5a.InsertStringItem(0,str(item['_data']['id']))
                    self.list_ctrl_5a.SetStringItem(pos,1,str(item['_data']['nombre']))
                    self.list_ctrl_5a.SetStringItem(pos,2,str(item['_data']['precio']))
                    self.list_ctrl_5a.SetStringItem(pos,3,str(item['_data']['disponible']))
                    self.primeros.append(item['_data']['id'])
                    if self.editando == True:
                        try:
                            self.primerosModDel.pop(self.primerosModDel.index(item['_data']['nombre']))
                            # si se habia añadido para borrarse lo quitamos
                        except Exception, e:
                            # en caso contrario lo añadimos para que se añada
                            self.primerosModAdd.append(item['_data']['id'])
        event.Skip()

    # Elimina el item seleccionado o el primero en caso de no estar ninguno seleccionado de la lista de primeros
    def left_prim(self, event):  # wxGlade: crear_menu.<event_handler>
        print "left_prim"
        if self.list_ctrl_5a.GetFirstSelected()!=-1:
            item = self.searchItem( self.list_ctrl_5a.GetItemText( self.list_ctrl_5a.GetFirstSelected() ), servicio.Items )
            self.list_ctrl_5a.DeleteItem(self.list_ctrl_5a.GetFirstSelected())
            self.primeros.pop(self.primeros.index(item['_data']['id']))
            if self.editando == True:
                try:
                    self.primerosModAdd.pop(self.primerosModAdd.index(item['_data']['id']))
                    # antes de añadirlo a la lista de borrados comprobamos si se a añadido como nuevo item en al modificacion
                except Exception, e:
                    # si no lo esta quiere decir que se esta borrando un item que estaba desde el principio en el manu
                    self.primerosModDel.append(item['_data']['nombre'])
        else:
            try:
                self.primeros.pop(self.primeros.index(int(self.list_ctrl_5a.GetItem(itemId=0, col=0).GetText())))
                if self.editando == True:
                    try:
                        self.primerosModAdd.pop(self.primerosModAdd.index(str(self.list_ctrl_5a.GetItem(itemId=0, col=1).GetText())))
                    except Exception, e:
                        self.primerosModDel.append(str(self.list_ctrl_5a.GetItem(itemId=0, col=1).GetText()))
                self.list_ctrl_5a.DeleteItem(0)
            except Exception, e:
                pass
        event.Skip()

    # Busta iditem en la lista de items
    def searchItem(self,iditem, items):
        for element in items:
            if str(element['_data']['id']) == str(iditem):
                return element

    # Abre la ventana de crear item y bindea un evento para que al cerrarse se actualice la lista de items
    def crear_item(self, event):  # wxGlade: crear_menu.<event_handler>
        print "crear_item"
        crearItem = crear_item(self)
        crearItem.Show()
        self.Hide()                 # oculta la ventana de crear menu
        crearItem.Bind(wx.EVT_CLOSE, self.on_close_crear_item)
        self.crearItem = crearItem # comentar esto creo que sobra
        event.Skip()

    # Actualiza la lista de items
    def on_close_crear_item(self, event):
        self.list_ctrl_3.DeleteAllItems() # limpiamos la lista
        servicio.updateItems()            # actualizamos los items del servidor
        for data in servicio.Items:       # y actualizamos la lista
            pos = self.list_ctrl_3.InsertStringItem(0,str(data['_data']['id']))
            self.list_ctrl_3.SetStringItem(pos,1,str(data['_data']['nombre']))
            self.list_ctrl_3.SetStringItem(pos,2,str(data['_data']['precio']))
            self.list_ctrl_3.SetStringItem(pos,3,str(data['_data']['disponible']))
        if self.editando:
            # actualizamos las listas de items
            self.menuMod = servicio.getMenu(self.menuMod['nombre'])
            self.list_ctrl_5a.DeleteAllItems()
            for data in self.menuMod['primeros']:
                pos = self.list_ctrl_5a.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5a.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5a.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5a.SetStringItem(pos,3,str(data['_data']['disponible']))
            self.list_ctrl_5ab.DeleteAllItems()
            for data in self.menuMod['segundos']:
                pos = self.list_ctrl_5ab.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items)))
                self.list_ctrl_5ab.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5ab.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5ab.SetStringItem(pos,3,str(data['_data']['disponible']))
            self.list_ctrl_5abc.DeleteAllItems()
            for data in self.menuMod['postres']:
                pos = self.list_ctrl_5abc.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items)))
                self.list_ctrl_5abc.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5abc.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5abc.SetStringItem(pos,3,str(data['_data']['disponible']))
        else:
            # usar las variables de primeros segundos y postres para rellenar las listas actualizadas
            self.list_ctrl_5a.DeleteAllItems()
            for x in self.primeros:
                data = self.searchItem(x,servicio.Items)
                pos = self.list_ctrl_5a.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5a.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5a.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5a.SetStringItem(pos,3,str(data['_data']['disponible']))
            self.list_ctrl_5ab.DeleteAllItems()
            for x in self.segundos:
                data = self.searchItem(x,servicio.Items)
                pos = self.list_ctrl_5ab.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5ab.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5ab.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5ab.SetStringItem(pos,3,str(data['_data']['disponible']))
            self.list_ctrl_5abc.DeleteAllItems()
            for x in self.postres:
                data = self.searchItem(x,servicio.Items)
                pos = self.list_ctrl_5abc.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5abc.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5abc.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5abc.SetStringItem(pos,3,str(data['_data']['disponible']))
        closed_window = event.EventObject
        if closed_window == self.crearItem:
            self.crearItem = None
            self.Show()
        elif closed_window == self:
            print 'Carry out your code for when Main window closes'
        event.Skip()

    # Añade el item seleccionado a la lista de segundos
    def add_seg(self, event):  # wxGlade: crear_menu.<event_handler>
        print "add_seg"
        # comprobar si el item existe en la lista para no añadirlo dos veces
        if self.list_ctrl_3.GetFocusedItem()!=-1:
            item = self.searchItem(self.list_ctrl_3.GetItemText(self.list_ctrl_3.GetFocusedItem()),servicio.Items)
            try:
                self.segundos.index(item['_data']['id'])
                # el item existe
            except Exception, e:
                # el item no esta en la lista segundos
                if self.list_ctrl_3.GetFirstSelected()!=-1:
                    pos = self.list_ctrl_5ab.InsertStringItem(0,str(item['_data']['id']))
                    self.list_ctrl_5ab.SetStringItem(pos,1,str(item['_data']['nombre']))
                    self.list_ctrl_5ab.SetStringItem(pos,2,str(item['_data']['precio']))
                    self.list_ctrl_5ab.SetStringItem(pos,3,str(item['_data']['disponible']))
                    self.segundos.append(item['_data']['id'])
                    if self.editando == True:
                        try:
                            self.segundosModDel.pop(self.segundosModDel.index(item['_data']['nombre']))
                        except Exception, e:
                            self.segundosModAdd.append(item['_data']['id'])
        event.Skip()

    # igual que left_prim pero con la lista de segundos
    def left_seg(self, event):  # wxGlade: crear_menu.<event_handler>
        print "left_seg"
        if self.list_ctrl_5ab.GetFirstSelected()!=-1:
            item = self.searchItem(self.list_ctrl_5ab.GetItemText(self.list_ctrl_5ab.GetFirstSelected()),servicio.Items)
            self.list_ctrl_5ab.DeleteItem(self.list_ctrl_5ab.GetFirstSelected())
            self.segundos.pop(self.segundos.index(item['_data']['id']))
            if self.editando==True:
                self.segundosModDel.append(item['_data']['nombre'])
        else:
            try:
                self.segundos.pop(self.segundos.index(int(self.list_ctrl_5ab.GetItem(itemId=0, col=0).GetText())))
                if self.editando == True:
                    try:
                        self.segundosModAdd.pop(self.segundosModAdd.index(str(self.list_ctrl_5ab.GetItem(itemId=0, col=1).GetText())))
                    except Exception, e:
                        self.segundosModDel.append(str(self.list_ctrl_5ab.GetItem(itemId=0, col=1).GetText()))
                self.list_ctrl_5ab.DeleteItem(0)
            except Exception, e:
                pass
        event.Skip()

    # igual que add_prim pero con la lista de postres
    def add_postre(self, event):  # wxGlade: crear_menu.<event_handler>
        # comprobar si el item existe en la lista para no añadirlo dos veces
        if self.list_ctrl_3.GetFocusedItem()!=-1:
            item = self.searchItem(self.list_ctrl_3.GetItemText(self.list_ctrl_3.GetFocusedItem()),servicio.Items)
            try:
                self.postres.index(item['_data']['id'])
                # el item existe
            except Exception, e:
                # el item no esta en la lista postres
                if self.list_ctrl_3.GetFirstSelected()!=-1:
                    pos = self.list_ctrl_5abc.InsertStringItem(0,str(item['_data']['id']))
                    self.list_ctrl_5abc.SetStringItem(pos,1,str(item['_data']['nombre']))
                    self.list_ctrl_5abc.SetStringItem(pos,2,str(item['_data']['precio']))
                    self.list_ctrl_5abc.SetStringItem(pos,3,str(item['_data']['disponible']))
                    self.postres.append(item['_data']['id'])
                    if self.editando == True:
                        try:
                            self.postresModDel.pop(self.postresModDel.index(item['_data']['nombre']))
                        except Exception, e:
                            self.postresModAdd.append(item['_data']['id'])
        event.Skip()

    # igual que lef_prim pero con los postres
    def left_postre(self, event):  # wxGlade: crear_menu.<event_handler>
        print "left_postre"
        if self.list_ctrl_5abc.GetFirstSelected()!=-1:
            item = self.searchItem(self.list_ctrl_5abc.GetItemText(self.list_ctrl_5abc.GetFirstSelected()),servicio.Items)
            self.list_ctrl_5abc.DeleteItem(self.list_ctrl_5abc.GetFirstSelected())
            self.postres.pop(self.postres.index(item['_data']['id']))
            if self.editando == True:
                self.postresModDel.append(item['_data']['nombre'])
        else:
            try:
                self.postres.pop(self.postres.index(int(self.list_ctrl_5abc.GetItem(itemId=0, col=0).GetText())))
                if self.editando == True:
                    try:
                        self.postresModAdd.pop(self.postresModAdd.index(str(self.list_ctrl_5abc.GetItem(itemId=0, col=1).GetText())))
                    except Exception, e:
                        self.postresModDel.append(str(self.list_ctrl_5abc.GetItem(itemId=0, col=1).GetText()))
                self.list_ctrl_5abc.DeleteItem(0)             
            except Exception, e:
                pass
        event.Skip()

# end of class crear_menu

class crear_item(wx.Frame):
    def __init__(self, parent, item=-1, *args, **kwds):
        # begin wxGlade: crear_item.__init__
        kwds["style"] = wx.CLOSE_BOX|wx.CAPTION|wx.MINIMIZE_BOX|wx.CLIP_CHILDREN
        wx.Frame.__init__(self,parent, *args, **kwds)
        self.text_ctrl_8 = wx.TextCtrl(self, wx.ID_ANY, "", size=(200,-1))
        self.sizer_32_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Nombre"))
        self.text_ctrl_9 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_33_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Precio"))
        self.sizer_20_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Descripcion"))
        self.text_ctrl_4 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.button_13 = wx.Button(self, wx.ID_ANY, _("img"))
        self.sizer_22_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Imagen"))
        self.checkbox_2 = wx.CheckBox(self, wx.ID_ANY, "")
        self.sizer_23_staticbox = wx.StaticBox(self, wx.ID_ANY, _("Disponible"))
        self.button_12 = wx.Button(self, wx.ID_ANY, _("Guardar"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.solo_num, self.text_ctrl_9)
        self.Bind(wx.EVT_BUTTON, self.load_img_item, self.button_13)

        self.img = 0
        self.itemMod = -1

        if item != -1:
            print 'Editando '+item
            self.itemMod = self.searchItem(item,servicio.Items)
            self.text_ctrl_8.AppendText(self.itemMod['_data']['nombre'])
            self.text_ctrl_9.AppendText(str(self.itemMod['_data']['precio']))
            self.text_ctrl_4.AppendText(self.itemMod['_data']['descripcion'])
            if self.itemMod['_data']['disponible'] == False:
                self.checkbox_2.SetValue(0)
            self.img = self.itemMod['_data']['imagen']
            self.Bind(wx.EVT_BUTTON, self.modificar_item, self.button_12)
        else:
            self.Bind(wx.EVT_BUTTON, self.crear_item_go, self.button_12)
        # centramos la ventana en la pantalla
        self.Center()

        # end wxGlade

    def modificar_item(self, event):  # wxGlade: crear_item.<event_handler>
        print "modificar_item"
        if len(self.text_ctrl_9.GetValue()) and len(self.text_ctrl_8.GetValue()) and len(self.text_ctrl_4.GetValue()):
            if servicio.updateItem(self.itemMod['_data']['nombre'],self.checkbox_2.GetValue(), self.text_ctrl_9.GetValue(), self.text_ctrl_8.GetValue(), self.text_ctrl_4.GetValue(), self.img):
                print 'item modificado'
                msgbox = wx.MessageBox(u'!Item guardado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            else:
                print 'no se modifico!'
                msgbox = wx.MessageBox(u'¡El item no se pudo guardar!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
            self.Close(True)
        else:
            msgbox = wx.MessageBox(u'¡Rellena los campos!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    def searchItem(self,iditem, items):
        for element in items:
            if str(element['_data']['id']) == iditem:
                return element

    def __set_properties(self):
        # begin wxGlade: crear_item.__set_properties
        self.SetTitle(_(u"Item"))
        self.text_ctrl_4.SetMinSize((200, 100))
        self.checkbox_2.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: crear_item.__do_layout
        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_8 = wx.GridSizer(2, 2, 0, 0)
        self.sizer_23_staticbox.Lower()
        sizer_23 = wx.StaticBoxSizer(self.sizer_23_staticbox, wx.HORIZONTAL)
        self.sizer_22_staticbox.Lower()
        sizer_22 = wx.StaticBoxSizer(self.sizer_22_staticbox, wx.HORIZONTAL)
        self.sizer_20_staticbox.Lower()
        sizer_20 = wx.StaticBoxSizer(self.sizer_20_staticbox, wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_sal = wx.BoxSizer(wx.VERTICAL)
        self.sizer_33_staticbox.Lower()
        sizer_33 = wx.StaticBoxSizer(self.sizer_33_staticbox, wx.HORIZONTAL)
        self.sizer_32_staticbox.Lower()
        sizer_32 = wx.StaticBoxSizer(self.sizer_32_staticbox, wx.HORIZONTAL)
        sizer_32.Add(self.text_ctrl_8, 0, wx.EXPAND, 0)
        sizer_19.Add(sizer_32, 1, wx.EXPAND, 0)
        sizer_33.Add(self.text_ctrl_9, 0, wx.EXPAND, 0)
        sizer_19.Add(sizer_33, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(sizer_19, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_20.Add(self.text_ctrl_4, 0, wx.EXPAND, 0)
        sizer_22.Add(self.button_13, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_8.Add(sizer_22, 1, wx.EXPAND, 0)
        sizer_23.Add(self.checkbox_2, 0, 0, 0)
        sizer_sal.Add(sizer_23,0, wx.EXPAND, 0)
        sizer_sal.Add(self.button_12,0,wx.EXPAND,0)
        grid_sizer_8.Add(sizer_sal, 1, wx.EXPAND, 0)
        sizer_18.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_18)
        sizer_18.Fit(self)
        self.Layout()
        # end wxGlade

    def solo_num(self, event):  # wxGlade: crear_item.<event_handler>
        print "solo_num"
        raw_value = self.text_ctrl_9.GetValue().strip()
        # numeric check
        if all(x in '0123456789.' for x in raw_value):
            pass
        else:
            self.text_ctrl_9.ChangeValue('')
        event.Skip()

    def load_img_item(self, event):  # wxGlade: crear_item.<event_handler>
        print "load_img_item"
        img = self.img
        openFileDialog = wx.FileDialog(self, u"Selecionar imagen del artículo", "", "", "pictures (*.jpeg,*.jpg,*.png)|*.jpeg;*.jpg;*.png", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)

        if openFileDialog.ShowModal() == wx.ID_CANCEL:
            return     # the user changed idea...

        print openFileDialog.GetPath()
        # pasar a base64 y guardar en variable
        with open(openFileDialog.GetPath(), "rb") as imageFile:
            img = base64.b64encode(imageFile.read())
        if img!=self.img:
            msgbox = wx.MessageBox(u'!Imágen guardada!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            self.img = img
        else:
            msgbox = wx.MessageBox(u'¡La imágen no se guardo, o elegiste la misma que ya estaba guardada!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    def crear_item_go(self, event):  # wxGlade: crear_item.<event_handler>
        print "crear_item_go"
        if len(self.text_ctrl_9.GetValue()) and len(self.text_ctrl_8.GetValue()) and len(self.text_ctrl_4.GetValue()):
            if servicio.createItem(self.checkbox_2.GetValue(), self.text_ctrl_9.GetValue(), self.text_ctrl_8.GetValue(), self.text_ctrl_4.GetValue(), self.img, 0, 0, 0, 0):
                print 'item creado'
                msgbox = wx.MessageBox(u'!Item creado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            else:
                print 'no se creo!'
                msgbox = wx.MessageBox(u'¡El item no se pudo crear!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
            self.Close(True)
        else:
            msgbox = wx.MessageBox(u'¡Rellena los campos!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

# end of class crear_item

class crear_oferta(wx.Frame):

    def searchNomItem(self, nomitem, items):
        for element in items:
            if str(element['_data']['nombre']) == nomitem:
                return element['_data']['id']

    def __init__(self, parent, oferta=-1, *args, **kwds):
        # begin wxGlade: crear_oferta.__init__
        kwds["style"] = wx.CLOSE_BOX|wx.CAPTION|wx.MINIMIZE_BOX|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, parent, *args, **kwds)
        self.calendar_ctrl_4 = wx.calendar.CalendarCtrl(self, wx.ID_ANY, style=wx.calendar.CAL_MONDAY_FIRST)
        #self.text_ctrl_10 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_35_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Nombre"))
        self.text_ctrl_5 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_26_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Duración en dias"))
        self.text_ctrl_6 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.sizer_27_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Precio"))
        self.checkbox_3 = wx.CheckBox(self, wx.ID_ANY, "")
        self.sizer_28_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Activo"))
        self.button_15 = wx.Button(self, wx.ID_ANY, _(u"img"))
        self.button_16 = wx.Button(self, wx.ID_ANY, _(u"Guardar"))
        self.list_ctrl_5 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.sizer_29_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Items"))
        self.button_17 = wx.Button(self, wx.ID_ANY, _(u"<<"))
        self.button_18 = wx.Button(self, wx.ID_ANY, _(u">>"))
        self.button_crear_item = wx.Button(self, wx.ID_ANY, _(u"Crear item"))
        self.list_ctrl_4 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.text_ctrl_descripcion = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.sizer_descripcion_staticbox = wx.StaticBox(self, wx.ID_ANY, _(u"Descripción"))
        if oferta!=-1:
            self.text_ctrl_10 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY,size=(200,-1))
        else:
            self.text_ctrl_10 = wx.TextCtrl(self, wx.ID_ANY, "", size=(200,-1))

        self.createMenu()

        self.list_ctrl_4.InsertColumn(0,u"ID")
        self.list_ctrl_4.SetColumnWidth(0,0)
        self.list_ctrl_4.InsertColumn(1,u"Nombre")
        self.list_ctrl_4.SetColumnWidth(1,100)
        self.list_ctrl_4.InsertColumn(2,u"Precio")
        self.list_ctrl_4.SetColumnWidth(2,60)
        self.list_ctrl_4.InsertColumn(3,u"Disponible")
        self.list_ctrl_4.SetColumnWidth(3,45)

        self.list_ctrl_5.InsertColumn(0,u"ID")
        self.list_ctrl_5.SetColumnWidth(0,0)
        self.list_ctrl_5.InsertColumn(1,u"Nombre")
        self.list_ctrl_5.SetColumnWidth(1,100)
        self.list_ctrl_5.InsertColumn(2,u"Precio")
        self.list_ctrl_5.SetColumnWidth(2,60)
        self.list_ctrl_5.InsertColumn(3,u"Disponible")
        self.list_ctrl_5.SetColumnWidth(3,45)

        for data in servicio.Items:
            pos = self.list_ctrl_4.InsertStringItem(0,str(data['_data']['id']))
            self.list_ctrl_4.SetStringItem(pos,1,str(data['_data']['nombre']))
            self.list_ctrl_4.SetStringItem(pos,2,str(data['_data']['precio']))
            self.list_ctrl_4.SetStringItem(pos,3,str(data['_data']['disponible']))

        # variables para guardar los items asignados y la codificacion en base64 de la imagen
        # en ellos se listan las id de la base de datos
        self.items = []
        self.img = 0
        # variables temporales para los items que se asignan y se borran mientras editamos un menu
        self.itemsModAdd = []
        self.itemsModDel = []

        self.editando = False

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.solo_num, self.text_ctrl_5)
        self.Bind(wx.EVT_TEXT, self.solo_num2, self.text_ctrl_6)
        self.Bind(wx.EVT_CHECKBOX, self.activo, self.checkbox_3)
        self.Bind(wx.EVT_BUTTON, self.load_img_oferta, self.button_15)
        self.Bind(wx.EVT_BUTTON, self.guardar_oferta, self.button_16)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.item_selec2, self.list_ctrl_5)
        self.Bind(wx.EVT_BUTTON, self.pasar_izq, self.button_17)
        self.Bind(wx.EVT_BUTTON, self.pasar_der, self.button_18)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.item_select, self.list_ctrl_4)
        self.Bind(wx.EVT_BUTTON, self.crear_item, self.button_crear_item)
        self.list_ctrl_4.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.showPopupMenu)

        # si estamos editando una oferta rellenamos los datos
        if oferta!=-1:
            print 'Editando oferta '+oferta
            self.ofertaMod = self.searchOferta(oferta,servicio.Ofertas)
            self.text_ctrl_10.AppendText(self.ofertaMod['nombre'])
            self.text_ctrl_6.AppendText(str(self.ofertaMod['precio']))
            self.text_ctrl_descripcion.AppendText(self.ofertaMod['descripcion'])

            # seleccionar fechas
            fechaini = datetime.datetime.strptime(self.ofertaMod['fecha_ini'], "%Y-%m-%dT00:00:00")
            fechafin = datetime.datetime.strptime(self.ofertaMod['fecha_fin'], "%Y-%m-%dT00:00:00")

            self.calendar_ctrl_4.PySetDate(fechaini)
            # duracion en dias
            delta = fechafin - fechaini
            self.text_ctrl_5.AppendText(str(delta.days))
            if self.ofertaMod['disponible'] == False:
                self.checkbox_3.SetValue(0)
            self.img = self.ofertaMod['imagen']
            # rellenar listas
            for data in self.ofertaMod['items']:
                pos = self.list_ctrl_5.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5.SetStringItem(pos,3,str(data['_data']['disponible']))
                self.items.append(self.searchNomItem(data['_data']['nombre'],servicio.Items)) # guardamos las id de los items modelos
            self.editando = True # variable bandera

        # centramos la ventana en la pantalla
        self.Center()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: crear_oferta.__set_properties
        self.SetTitle(_("Oferta"))
        self.SetSize((800, 550))
        self.checkbox_3.SetValue(1)
        self.list_ctrl_5.SetMinSize((150, 500))
        self.list_ctrl_4.SetMinSize((250, 500))
        self.calendar_ctrl_4.SetMinSize((240, 150))
        self.text_ctrl_descripcion.SetMinSize((200, 100))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: crear_oferta.__do_layout
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_10 = wx.FlexGridSizer(1, 2, 0, 0)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_29_staticbox.Lower()
        self.sizer_descripcion_staticbox.Lower()
        sizer_29 = wx.StaticBoxSizer(self.sizer_29_staticbox, wx.HORIZONTAL)
        grid_sizer_9 = wx.FlexGridSizer(7, 1, 0, 0)
        self.sizer_28_staticbox.Lower()
        sizer_28 = wx.StaticBoxSizer(self.sizer_28_staticbox, wx.HORIZONTAL)
        self.sizer_27_staticbox.Lower()
        sizer_27 = wx.StaticBoxSizer(self.sizer_27_staticbox, wx.HORIZONTAL)
        self.sizer_26_staticbox.Lower()
        sizer_26 = wx.StaticBoxSizer(self.sizer_26_staticbox, wx.HORIZONTAL)
        self.sizer_35_staticbox.Lower()
        sizer_35 = wx.StaticBoxSizer(self.sizer_35_staticbox, wx.HORIZONTAL)
        grid_sizer_9.Add(self.calendar_ctrl_4, 0, wx.EXPAND, 0)
        sizer_35.Add(self.text_ctrl_10, 0, 0, 0)
        grid_sizer_9.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_26.Add(self.text_ctrl_5, 0, 0, 0)
        grid_sizer_9.Add(sizer_26, 1, wx.EXPAND, 0)
        sizer_27.Add(self.text_ctrl_6, 0, 0, 0)
        grid_sizer_9.Add(sizer_27, 1, wx.EXPAND, 0)
        sizer_28.Add(self.checkbox_3, 0, 0, 0)
        grid_sizer_activo = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_activo.Add(sizer_28, 1, wx.EXPAND, 0)
        grid_sizer_activo.Add((40,10),0,0,0)
        grid_sizer_activo.Add(self.button_15, 1, wx.EXPAND, 0)
        sizer_descripcion = wx.StaticBoxSizer(self.sizer_descripcion_staticbox, wx.HORIZONTAL)
        sizer_descripcion.Add(self.text_ctrl_descripcion,0,0,0)
        grid_sizer_9.Add(grid_sizer_activo,1,wx.EXPAND,0)
        grid_sizer_9.Add(sizer_descripcion,1,wx.EXPAND,0)
        grid_sizer_9.Add(self.button_16, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_25.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        sizer_29.Add(self.list_ctrl_5, 1, wx.EXPAND, 0)
        sizer_25.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_30.Add((80, 40), 0, 0, 0)
        sizer_30.Add(self.button_crear_item ,0,0,0)
        sizer_30.Add((80, 160), 0, 0, 0)
        sizer_31.Add(self.button_17, 0, 0, 0)
        sizer_31.Add(self.button_18, 0, 0, 0)
        sizer_30.Add(sizer_31, 1, wx.EXPAND, 0)
        grid_sizer_10.Add(sizer_30, 1, wx.EXPAND, 0)
        grid_sizer_10.Add(self.list_ctrl_4, 1, wx.EXPAND, 0)
        sizer_25.Add(grid_sizer_10, 1, wx.EXPAND, 0)
        sizer_24.Add(sizer_25, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_24)
        self.Layout()
        # end wxGlade

    # Busta iditem en la lista de ofertas
    def searchOferta(self, iditem, items):
        for element in items:
            if str(element['nombre']) == iditem:
                return element

    # Busta iditem en la lista de items
    def searchItem(self,iditem, items):
        for element in items:
            if str(element['_data']['id']) == iditem:
                return element

    # Abre la ventana de crear item y bindea un evento para que al cerrarse se actualice la lista de items
    def crear_item(self, event):  # wxGlade: crear_menu.<event_handler>
        print "crear_item"
        crearItem = crear_item(self)
        crearItem.Show()
        self.Hide()                 # oculta la ventana de crear menu
        crearItem.Bind(wx.EVT_CLOSE, self.on_close_crear_item)
        self.crearItem = crearItem # comentar esto creo que sobra
        event.Skip()

    # Actualiza la lista de items
    def on_close_crear_item(self, event):
        self.list_ctrl_4.DeleteAllItems() # limpiamos la lista
        servicio.updateItems()            # actualizamos los items del servidor
        for data in servicio.Items:       # y actualizamos la lista
            pos = self.list_ctrl_4.InsertStringItem(0,str(data['_data']['id']))
            self.list_ctrl_4.SetStringItem(pos,1,str(data['_data']['nombre']))
            self.list_ctrl_4.SetStringItem(pos,2,str(data['_data']['precio']))
            self.list_ctrl_4.SetStringItem(pos,3,str(data['_data']['disponible']))
        if self.editando:
            # actualizamos la lista de items de la oferta
            self.ofertaMod = servicio.getOferta(self.ofertaMod['nombre'])
            self.list_ctrl_5.DeleteAllItems()
            for data in self.ofertaMod['items']:
                pos = self.list_ctrl_5.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5.SetStringItem(pos,3,str(data['_data']['disponible']))
        else:
            # usar las variables de primeros segundos y postres para rellenar las listas actualizadas
            self.list_ctrl_5.DeleteAllItems()
            for x in self.items:
                data = self.searchItem(x,servicio.Items)
                pos = self.list_ctrl_5.InsertStringItem(0,str(self.searchNomItem(data['_data']['nombre'],servicio.Items))) # id diferente explicar
                self.list_ctrl_5.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_5.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_5.SetStringItem(pos,3,str(data['_data']['disponible']))
        closed_window = event.EventObject
        if closed_window == self.crearItem:
            self.crearItem = None
            self.Show()
        elif closed_window == self:
            print 'Carry out your code for when Main window closes'
        event.Skip()

    # funcion para crear el context menu del click izquierdo
    def createMenu(self):
        self.menu = wx.Menu()
        item1 = self.menu.Append(-1,'Editar')           # añadimos los items
        item2 = self.menu.Append(-1,'Borrar')
        self.Bind(wx.EVT_MENU, self.editarItem, item1)  # bindeamos sus acciones
        self.Bind(wx.EVT_MENU, self.borrarItem, item2)

    def borrarItem(self,event):
        print 'Borrando item'
        item = self.list_ctrl_4.GetItemText(self.list_ctrl_4.GetFocusedItem())
        if servicio.delItem(item):
            msgbox = wx.MessageBox('!Item borrado!', 'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            self.list_ctrl_4.DeleteAllItems() # limpiamos la lista
            self.comprobarItemsBorrado(item) 
            servicio.updateItems()            # actualizamos los items del servidor
            for data in servicio.Items:       # y actualizamos la lista
                pos = self.list_ctrl_4.InsertStringItem(0,str(data['_data']['id']))
                self.list_ctrl_4.SetStringItem(pos,1,str(data['_data']['nombre']))
                self.list_ctrl_4.SetStringItem(pos,2,str(data['_data']['precio']))
                self.list_ctrl_4.SetStringItem(pos,3,str(data['_data']['disponible']))
        else:
            print 'ERROR al borrar el item'
            msgbox = wx.MessageBox(u'¡No se pudo borrar el item!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    # muestra el la ventana de editar item con los datos del item que estamos editando
    # tambien se bindea el evento para que se actualicen los items cuando se cierre la ventana de editar item
    def editarItem(self,event):
        print 'Editando item'
        item = self.list_ctrl_4.GetItemText(self.list_ctrl_4.GetFocusedItem())
        crearItem = crear_item(self,item=item)
        crearItem.Show()
        self.Hide()
        crearItem.Bind(wx.EVT_CLOSE, self.on_close_crear_item)
        self.crearItem = crearItem # comentar esto creo que sobra
        event.Skip()

    # muestra el menu del click derecho
    def showPopupMenu(self,event):
        print 'Boton derecho'
        position = self.ScreenToClient(wx.GetMousePosition())
        item = self.list_ctrl_4.HitTest(event.GetPosition())
        if item[0]!=-1: # para que solo aparezca el menu cuando pincha en un item
            self.PopupMenu(self.menu,position)
        event.Skip()

    # cuando se borra un item actualiza la lista de items el item borrado de ellas
    def comprobarItemsBorrado(self,itemBorrado):
        count = self.list_ctrl_5.GetItemCount()
        i=0
        for row in range(count):
            item = self.list_ctrl_5.GetItem(itemId=row, col=0)
            if item.GetText() == itemBorrado:
                self.list_ctrl_5.DeleteItem(i)
                self.primeros.pop(self.primeros.index(int(itemBorrado)))
                break
            i+=1

    # solo deja escribir numeros
    def solo_num(self, event):  # wxGlade: crear_menu.<event_handler>
        print "solo_num"
        raw_value = self.text_ctrl_5.GetValue().strip()
        # numeric check
        if all(x in '0123456789' for x in raw_value):
            pass
        else:
            self.text_ctrl_5.ChangeValue('')
        event.Skip()

    # solo deja escribir numeros y puntos
    def solo_num2(self, event):  # wxGlade: crear_menu.<event_handler>
        print "solo_num2"
        raw_value = self.text_ctrl_6.GetValue().strip()
        # numeric check
        if all(x in '0123456789.' for x in raw_value):
            pass
        else:
            self.text_ctrl_6.ChangeValue('')
        event.Skip()

    def activo(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "Event handler 'activo' not implemented!"
        event.Skip()

    def load_img_oferta(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "load_img"
        img = self.img
        openFileDialog = wx.FileDialog(self, u"Selecionar imagen del menu", "", "", "pictures (*.jpeg,*.jpg,*.png)|*.jpeg;*.jpg;*.png", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)

        if openFileDialog.ShowModal() == wx.ID_CANCEL:
            return     # the user changed idea...

        print openFileDialog.GetPath()
        # pasar a base64 y guardar en variable
        with open(openFileDialog.GetPath(), "rb") as imageFile:
            img = base64.b64encode(imageFile.read())
        if img!=self.img:
            msgbox = wx.MessageBox(u'!Imágen guardada!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
            self.img = img
        else:
            msgbox = wx.MessageBox(u'¡La imágen no se guardo, o elegiste la misma que ya estaba guardada!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    def guardar_oferta(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "guardar_oferta"
        # comprobar que no hay campos vacios
        if self.text_ctrl_10.GetValue()!='' and self.text_ctrl_5.GetValue()!='' and self.text_ctrl_6.GetValue()!='' and self.text_ctrl_descripcion.GetValue()!='':
            # generando fechas de inicio y fin del menu el objeto que encapsula el sevicio en el interfaz
            # recibe las fechas en formato %Y-%m-%d en una string
            fechaini = self.calendar_ctrl_4.GetDate().FormatISODate()
            fechaini2 = datetime.datetime.strptime(fechaini, "%Y-%m-%d")

            fechafin = fechaini2 + datetime.timedelta( days=int(self.text_ctrl_5.GetValue()) )
            fechafin = fechafin.date().isoformat()

            if self.editando == False:
                # crear menu
                if servicio.createOferta(self.checkbox_3.GetValue(), self.text_ctrl_6.GetValue(), self.text_ctrl_10.GetValue(), self.text_ctrl_descripcion.GetValue(), fechaini, fechafin, self.img):
                    # asignando items
                    if servicio.addItemOferta(self.items, self.text_ctrl_10.GetValue()):
                        print 'Items asignados'
                        msgbox = wx.MessageBox(u'!Oferta creada!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                        self.Close(True)
                    else:
                        servicio.delOferta(self.text_ctrl_10.GetValue())
                        msgbox = wx.MessageBox(u'¡No se pudo crear la oferta!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
                else:
                    msgbox = wx.MessageBox(u'¡No se pudo crear la oferta, cambie el nombre!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
            else:
                # editando menu
                if servicio.updateOferta(self.checkbox_3.GetValue(), self.text_ctrl_6.GetValue(), self.text_ctrl_10.GetValue(), self.text_ctrl_descripcion.GetValue(), fechaini, fechafin, self.img):
                    # asignando items
                    if servicio.addItemOferta(self.itemsModAdd, self.text_ctrl_10.GetValue()) and servicio.delItemOferta(self.itemsModDel, self.text_ctrl_10.GetValue()):
                        print 'Items asignados'
                        msgbox = wx.MessageBox(u'!Oferta editado!', u'Información', wx.ICON_INFORMATION | wx.STAY_ON_TOP)
                        self.Close(True)
                    else:
                        #servicio.delOferta(self.text_ctrl_10.GetValue())
                        msgbox = wx.MessageBox(u'¡No se pudo editar los items de la oferta!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
                else:
                    msgbox = wx.MessageBox(u'¡No se pudo editar la oferta!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        else:
            msgbox = wx.MessageBox(u'¡Rellena los campos!', u'Alerta', wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
        event.Skip()

    def item_selec2(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "Event handler 'item_selec2' not implemented!"
        event.Skip()

    def pasar_izq(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "pasar_izq"
        # comprobar si el item existe en la lista para no añadirlo dos veces
        if self.list_ctrl_4.GetFocusedItem()!=-1:
            item = self.searchItem(self.list_ctrl_4.GetItemText(self.list_ctrl_4.GetFocusedItem()),servicio.Items)
            try:
                self.items.index(item['_data']['id'])
                # el item existe
            except Exception, e:
                # el item no esta en la lista primeros
                if self.list_ctrl_4.GetFirstSelected()!=-1:
                    pos = self.list_ctrl_5.InsertStringItem(0,str(item['_data']['id']))
                    self.list_ctrl_5.SetStringItem(pos,1,str(item['_data']['nombre']))
                    self.list_ctrl_5.SetStringItem(pos,2,str(item['_data']['precio']))
                    self.list_ctrl_5.SetStringItem(pos,3,str(item['_data']['disponible']))
                    self.items.append(item['_data']['id'])
                    if self.editando == True:
                        try:
                            self.itemsModDel.pop(self.itemsModDel.index(item['_data']['nombre']))
                            # si se habia añadido para borrarse lo quitamos
                        except Exception, e:
                            # en caso contrario lo añadimos para que se añada
                            self.itemsModAdd.append(item['_data']['id'])
        event.Skip()

    def pasar_der(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "pasar_der"
        if self.list_ctrl_5.GetFirstSelected()!=-1:
            item = self.searchItem( self.list_ctrl_5.GetItemText( self.list_ctrl_5.GetFirstSelected() ), servicio.Items )
            self.list_ctrl_5.DeleteItem(self.list_ctrl_5.GetFirstSelected())
            self.items.pop(self.items.index(item['_data']['id']))
            if self.editando == True:
                try:
                    self.itemsModAdd.pop(self.itemsModAdd.index(item['_data']['id']))
                    # antes de añadirlo a la lista de borrados comprobamos si se a añadido como nuevo item en al modificacion
                except Exception, e:
                    # si no lo esta quiere decir que se esta borrando un item que estaba desde el principio en el manu
                    self.itemsModDel.append(item['_data']['nombre'])
        else:
            try:
                self.items.pop(self.items.index(int(self.list_ctrl_5.GetItem(itemId=0, col=0).GetText())))
                if self.editando == True:
                    try:
                        self.itemsModAdd.pop(self.itemsModAdd.index(str(self.list_ctrl_5.GetItem(itemId=0, col=1).GetText())))
                    except Exception, e:
                        self.itemsModDel.append(str(self.list_ctrl_5.GetItem(itemId=0, col=1).GetText()))
                self.list_ctrl_5.DeleteItem(0)
            except Exception, e:
                pass
        event.Skip()


    def item_select(self, event):  # wxGlade: crear_oferta.<event_handler>
        print "Event handler 'item_select' not implemented!"
        event.Skip()

# end of class crear_oferta

class InterfazServidor(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        main = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(main)
        main.Show()
        return 1

# end of class InterfazServidor

if __name__ == "__main__":
    try:
        servicio = ServicioPyro()
        servicio.isOnline()
    except Exception, e:
        print 'No se encontro servidor en localhost'

    gettext.install("Servidor") # replace with the appropriate catalog name

    Servidor = InterfazServidor(0)
    Servidor.MainLoop()